services:
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: ../docker/front.Dockerfile
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #   command: npm run start
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ${PWD}/docker/nginx:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
    depends_on:
      - backend
    restart: unless-stopped
  backend:
    container_name: backend
    build:
      dockerfile: ./docker/back.Dockerfile
    #command: python manage.py collectstatic --noinput & gunicorn -b 0.0.0.0:8000 db_project.wsgi:application & daphne -b 0.0.0.0 -p 8001 db_project.asgi:application
    command: sleep 10000
    volumes:
      - ${PWD}/db_project:/app
      - ./venv/lib/python3.11/site-packages:/usr/local/lib/python3.11/site-packages # volumize virtual environment for debugging
      - static_volume:/app/staticfiles

    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      - postgres
      # - elasticsearch
      - redis
    environment:
      DATABASE_URL: postgres://myuser:mypassword@db:5432/project1
    env_file:
      - .env

  postgres:
    image: postgis/postgis
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: project1
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      PGADMIN_USER: admin
      PGADMIN_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - ${PWD}/docker/volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser", "-d", "project1"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  redis:
    image: redis:latest
    container_name: redis_server
    command: redis-server
    ports:
      - "6379:6379"
    volumes:
      - ${PWD}/docker/volumes/redis:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - ${PWD}/docker/volumes/mongo:/data/db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

volumes:
  static_volume:
